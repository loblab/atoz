<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Type Speed Testing</title>
    <style>
      body {
        background: #242;
        color: #ccc;
        overflow: scroll;
        text-align: center;
        margin: 10px;
      }
      div {
        border: none;
        margin: 0;
        left: 0px;
      }
      #history {
        font-size: 60px;
      }
      #current {
        font-size: 180px;
        color: #fcc;
      }
      #chart-div {
        margin-left: 22%;
        margin-right: 22%;
      }
      #hit-chart {
        height: 240px !important;
      }
      #rptime {
        font-size: 68px;
      }
      #version {
        font-size: 12px;
        color: #888;
        margin-top: 6px;
      }
    </style>
    <script
      src="https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js"
      integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"
      integrity="sha256-t9UJPrESBeG2ojKTIcFLPGF7nHi2vEc7f5A2KpH/UBU="
      crossorigin="anonymous"
    ></script>
    <script>
      const version = "Ver 0.4 by LobLab 11/25/2020";
      var target = "abcdefghijklmnopqrstuvwxyz";
      var hist_key = "";
      var hist_ts = [];
      var start_ts = 0;
      var prev_ts = 0;
      var current_ts = 0;
      var hitChart = null;

      function formatDate(date) {
        var hh = date.getHours();
        var mm = date.getMinutes();
        mm = mm < 10 ? "0" + mm : mm;
        var strTime = hh + ":" + mm;
        var strDate = date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear();
        return strDate + " " + strTime;
      }

      function initChart() {
        var ctx = document.getElementById("hit-chart").getContext("2d");
        hitChart = new Chart(ctx, {
          type: "bar",
          data: {
            labels: [],
            datasets: [
              {
                data: [],
                backgroundColor: "rgba(255, 99, 132, 0.4)",
                borderColor: "rgba(255, 99, 132, 1)",
                borderWidth: 1,
              },
            ],
          },
          options: {
            legend: {
              display: false,
            },
            scales: {
              maintainAspectRatio: false,
              xAxes: [
                {
                  ticks: {
                    fontColor: "#ddd",
                    fontSize: 22,
                  },
                },
              ],
              yAxes: [
                {
                  ticks: {
                    fontColor: "#999",
                    fontSize: 16,
                    beginAtZero: true,
                  },
                },
              ],
            },
          },
        });
      }

      function addToChart(label, val) {
        hitChart.data.labels.push(label);
        hitChart.data.datasets.forEach((dataset) => {
          dataset.data.push(val);
        });
        hitChart.update();
      }

      function removeFromChart() {
        hitChart.data.labels.shift();
        hitChart.data.datasets.forEach((dataset) => {
          dataset.data.shift();
        });
        hitChart.update();
      }

      function resetChart(key) {
        hitChart.data.labels = [key];
        hitChart.data.datasets.forEach((dataset) => {
          dataset.data = [0];
        });
        hitChart.update();
      }

      function bannerChart(msg) {
        let delay = 0;
        for (let ch of msg) {
          let val = ch.charCodeAt();
          delay += val;
          setTimeout(function() {
            addToChart(ch, val);
          }, delay);
        }
      }

      function onKey(key, ts) {
        current_ts = ts;
        if (key == target.charAt(0)) {
          start_ts = current_ts;
          hist_ts = [ts];
          hist_key = key;
          $("#rptime").text("");
          resetChart(key);
        } else {
          hist_key += key;
          hist_ts.push(ts);
          addToChart(key, ts - prev_ts);
          if (hist_key.length > target.length) {
            hist_key = hist_key.substring(hist_key.length - target.length);
            hist_ts.shift();
            $("#rptime").text("");
            removeFromChart();
          }
        }
        $("#current").text(key);
        //TODO $("#history").text(hist_key);
        prev_ts = ts;
      }

      function report() {
        let dur = parseFloat(current_ts - start_ts) / 1000.0;
        let msg = dur.toFixed(2) + "s";
        $("#current").text(msg);
        let now = new Date();
        msg = formatDate(now);
        $("#rptime").text(msg);
      }

      $(function () {
        $("#version").text(version);
        $("#target").val(target);

        initChart();
        bannerChart("Type till match Target");

        $("#target").change(function () {
          target = $("#target").val();
        });

        $(window).keypress(function (e) {
          //console.log(e);
          if (e.target.id == "target") return;
          onKey(e.key, e.timeStamp);
          if (hist_key == target) {
            report();
          }
        });
      });
    </script>
  </head>
  <body>
    Target:<br />
    <input type="text" id="target" name="target" size="32" />
    <br />
    <div id="chart-div">
      <canvas id="hit-chart"></canvas>
    </div>
    <div id="current"></div>
    <div id="rptime"></div>
    <div id="version"></div>
  </body>
</html>
